module main{
  
  type record_type = enum { pc, laptop, mobile, server, router, firewall, ids}; // type of node
  type  record_safety = enum { safe, unsafe}; // node is safe or not  
  type  record_domain = enum { inside, outside, internet}; // node belongs to which side  

  //creation of node data type

  type record_node = record {
			record_type : record_type, 
			record_domain : record_domain,
			record_safety : record_safety
		};

  var route_matrix : [bv3,bv3]boolean; // what could be the equivalent of [0bv3][0bv3]boolean ?
  
  //node family 

  var node : [bv3]record_node;
  
  // temporary variables

  // init
  
  init {
       var temp_record : record_node; 
       var temp_record_safety : record_safety;
       var temp_reocrd_type : record_type; 


       // node0 to node2 are outsider node.
    
       temp_record.record_type = laptop;
       temp_record.record_safety = safe;  
       temp_record.record_domain = outside; 

       node[0bv3] = temp_record;
       
       temp_record.record_type = mobile;
       temp_record.record_safety = safe;
       temp_record.record_domain = outside;

       node[1bv3] = temp_record;
       
       temp_record.record_type = mobile;
       temp_record.record_safety = unsafe; // node2 is vulnerable
       temp_record.record_domain = outside;
       
       node[2bv3] = temp_record;
       
       // node3, node4 belongs to internet node.

       temp_record.record_type = router;
       temp_record.record_safety = safe;
       temp_record.record_domain = internet;
       
       node[3bv3] = temp_record;
       
       temp_record.record_type = router;
       temp_record.record_safety = safe;
       temp_record.record_domain = inside;

       node[4bv3] = temp_record;
       
       // node5 is firewall, which doesn't allow any unsafe request from outside the network

       temp_record.record_type = firewall;
       temp_record.record_safety = safe;
       temp_record.record_domain = inside;

       node[5bv3] = temp_record;
       
       // node6 to node7 are insider nodes.

       temp_record.record_type = pc;
       temp_record.record_safety = safe;
       temp_record.record_domain = inside;

       node[6bv3] = temp_record;
       
       temp_record.record_type = server;
       temp_record.record_safety = safe;
       temp_record.record_domain = inside;

       node[7bv3] = temp_record;

       
       /*for (i : integer) in range(0, 7){
           for (j : integer) in range(0, 7) {
		var p :	integer;
		reach_matrix[0][0] = true;		
       */
		/*
 		p = i+j; // how to do modulo operations 		
		if (p%2==0){
		  reach_matrix[i][j] = true; 
		} 
		else {
		   reach_matrix[i][j] = false;
		}*/
			
	    //}
        //}
        route_matrix = const(false, [bv3, bv3]boolean);
        route_matrix[0bv3, 3bv3] = true;
       
	
  }
  procedure update_nodes()
        modifies node;
  {
      for i in range(0bv3, 6bv3) {
          for j in range(0bv3, 6bv3) {
              if (route_matrix[i, j] && (node[i]).record_safety == unsafe) {
                  var temp_record : record_node;
                  temp_record = node[j];
                  temp_record.record_safety = unsafe;
                  node[j] = temp_record;
              }
          }
      }
	
  }

  next{
        call update_nodes();
  }

  // assumption and invariant condition  

  assume p : true;
  invariant q : false;     
  invariant attack : (node[5bv3]).record_safety == safe && (node[6bv3]).record_safety == safe && (node[7bv3]).record_safety == safe;  

  

  // result validation 

  control{
   f = unroll(5);
   check;
   print_results;
   f.print_cex(node[0bv3], node[1bv3], node[2bv3], node[3bv3], node[4bv3], node[5bv3], node[6bv3], node[7bv3]);
  }
  
}
